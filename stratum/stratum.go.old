package stratum

import (
	"github.com/powerman/rpc-codec/jsonrpc2"
	"go.uber.org/zap"
)

// Conn is a bidirectional, protocol-agnostic Stratum connection
// Since the stratum protocol acts like JSON-RPC2.0, but seems to allow Notifications from
// both Client and Server, the Conn includes a server to handle incoming notifications and a
// client to send them, as well as make remote calls, expecting a reply.
// Methods that the server will handle must be registered with rpc.RegisterName as "mining".
// Since jsonrpc2.ServerCodec handles notifications (by not replying), this should work.
type Conn struct {
	rpcClient *jsonrpc2.Client
	// we still use rpc.DefaultServer to handle incoming connections

	requests chan map[string]interface{}

	Jobs   chan map[string]interface{}
	Errors chan error
	logger *zap.SugaredLogger
}

func NewConn(host string, logger *zap.SugaredLogger) (*Client, error) {
	rpcClient, err := jsonrpc2.Dial("tcp", host)
	if err != nil {
		return nil, err
	}
	c := &Client{
		rpcClient: rpcClient,
		requests:  make(chan map[string]interface{}, 128),
		Jobs:      make(chan map[string]interface{}, 5),
		Errors:    make(chan error, 5),
		logger:    logger,
	}
	return c, nil
}
